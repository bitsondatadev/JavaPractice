package DataStructures; 

import org.junit.*;
import static org.junit.Assert.*;

public class StackTest{

	Stack<Integer> stack;

	@BeforeClass
	public static void initialSetUp(){
	}

	@AfterClass
	public static void finalTearDown(){
	}
	
	@Before
	public void setUp(){
		stack = new Stack<Integer>();	
	}

	@After
	public void tearDown(){

	}

	@Test
	public void testInitialize(){
		assertNotNull(stack);
		assertTrue(stack.empty());
		assertNull(stack.peek());
		assertNull(stack.pop());
	}

	@Test
	public void testPushAndPopFromNull(){
		Integer expected = new Integer(5);
		stack.push(expected);
		assertEquals(expected,stack.peek());
		assertEquals(expected,stack.pop());
		
		assertNull(stack.getHead());
		assertNull(stack.getTail());
		assertEquals(0,stack.size());
	}
	
	@Test
	public void testAppendAndRemoveAfterOneElement(){
		Integer five = new Integer(5);
		Integer eight = new Integer(8);
		
		stack.appendToTail(five);
		stack.appendToTail(eight);

		assertEquals(eight, stack.getHead().getNext().getData());
		assertEquals(eight, stack.getTail().getData());
		
		assertEquals(five, stack.getTail().getPrev().getData());
		assertEquals(five, stack.getHead().getData());

		stack.remove(eight);
		assertEquals(five, stack.getHead().getData());
		assertEquals(five, stack.getTail().getData());
		assertEquals(1, stack.size());

		stack.appendToTail(eight);

		assertEquals(eight, stack.getHead().getNext().getData());
		assertEquals(eight, stack.getTail().getData());
		
		assertEquals(five, stack.getTail().getPrev().getData());
		assertEquals(five, stack.getHead().getData());

		stack.remove(five);
		assertEquals(eight, stack.getHead().getData());
		assertEquals(eight, stack.getTail().getData());
		assertEquals(1, stack.size());

	}

	@Test
	public void testAppendAndRemoveTailAfterTwoElements(){
		Integer five = new Integer(5);
		Integer nine = new Integer(9);
		Integer eight = new Integer(8);
		
		stack.appendToTail(five);
		stack.appendToTail(nine);
		stack.appendToTail(eight);

		assertEquals(five, stack.getHead().getData());
		assertEquals(eight, stack.getTail().getData());

		assertEquals(nine, stack.getHead().getNext().getData());
		assertEquals(nine, stack.getTail().getPrev().getData());
		
		stack.removeTail();
		
		assertEquals(nine, stack.getHead().getNext().getData());
		assertEquals(nine, stack.getTail().getData());
		
		assertEquals(five, stack.getTail().getPrev().getData());
		assertEquals(five, stack.getHead().getData());
		
		assertEquals(2, stack.size());
	}

	@Test
	public void testAppendToHeadFromNull(){
		Integer expected = new Integer(5);
		
		stack.appendToHead(expected);
		
		assertEquals(expected,stack.getHead().getData());
		assertNull(stack.getHead().getNext());
		assertNull(stack.getHead().getPrev());
	}

	@Test
	public void testAppendToHeadAfterOneElement(){
		Integer five = new Integer(5);
		Integer eight = new Integer(8);
		
		stack.appendToHead(five);
		stack.appendToHead(eight);

		assertEquals(five, stack.getHead().getNext().getData());
		assertEquals(five, stack.getTail().getData());
		
		assertEquals(eight, stack.getTail().getPrev().getData());
		assertEquals(eight, stack.getHead().getData());
	}

	@Test
	public void testAppendToHeadAfterTwoElement(){
		Integer five = new Integer(5);
		Integer nine = new Integer(9);
		Integer eight = new Integer(8);
		
		stack.appendToHead(five);
		stack.appendToHead(nine);
		stack.appendToHead(eight);

		assertEquals(eight, stack.getHead().getData());
		assertEquals(five, stack.getTail().getData());

		assertEquals(nine, stack.getHead().getNext().getData());
		assertEquals(nine, stack.getTail().getPrev().getData());
	}

	@Test
	public void testSearch(){
		Integer five = new Integer(5);
		Integer nine = new Integer(9);
		Integer eight = new Integer(8);
		
		stack.appendToTail(five);
		stack.appendToTail(nine);
		stack.appendToTail(eight);

		assertEquals(five, stack.search(five).getData());
		assertEquals(eight, stack.search(eight).getData());
		assertEquals(nine, stack.search(nine).getData());
		assertNull(stack.search(4));
	}
	
	@Test
	public void testRemove(){
		Integer five = new Integer(5);
		Integer nine = new Integer(9);
		Integer eight = new Integer(8);
		
		stack.appendToTail(five);
		stack.appendToTail(nine);
		stack.appendToTail(eight);
		
		assertEquals(nine, stack.search(nine).getData());
		
		stack.remove(nine);

		assertEquals(five, stack.search(five).getData());
		assertEquals(eight, stack.search(eight).getData());
		assertNull(stack.search(9));
		assertNull(stack.search(4));
	}
}
