package Chapter3;

import java.util.ArrayList;
import java.util.List;
import DataStructures.*;

public class Question3<T>{

	private List<Stack<T>> stack;
	private final int threshold;
	private int size;
	private int currentStackIndex;

	public Question3(int threshold){
		this.stack = new ArrayList<Stack<T>>();
		this.stack.add(new Stack<T>());
		this.threshold = threshold > 0 ? threshold : 1;
		this.size = 0;
		this.currentStackIndex = 0;
	}
	
	public boolean empty(){
		return this.size == 0;
	}
	
	public boolean full(){
		return this.size == this.stack.size() * this.threshold;
	}
	
	public T peek(){
		if(this.stack.get(this.currentStackIndex) == null){
			return null;
		}
		return this.stack.getTail().getData();
	}
	
	public T pop(){
		if(this.empty()){
			return null;
		}
		T val = this.stack.get(this.currentStackIndex).pop();
		while(val == null && this.currentStackIndex >= 0){
			this.currentStackIndex--;
			val = this.stack.get(this.currentStackIndex).pop();
		}
		
		return val;
	}
	
	public T push(T item){
		if(item == null){
			return null;
		}
		if(this.stack.get(this.currentStackIndex).size() < this.threshold){
			this.stack.get(this.currentStackIndex).push(item);
		}else{
			this.stack.add(new Stack<T>());
			this.currentStackIndex++;
			this.stack.get(this.currentStackIndex).push(item);
		}
		
		return item;
	}
	
	public int size(){
		return this.size;
	}
}
