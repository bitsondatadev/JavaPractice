package Algorithms;

import java.util.ArrayList;
import java.util.List;

import org.junit.*;

import static org.junit.Assert.*;

public class BinarySearchTest{
	List<Integer> arr;
	List<String> strArr;
	BinarySearch<Integer> bs;
	BinarySearch<String> bsString;

	@Before
	public void setUp(){
		arr = new ArrayList<Integer>();
		strArr = new ArrayList<String>();
		bs = new BinarySearch<Integer>();
		bsString = new BinarySearch<String>();
	}

	@After
	public void tearDown(){

	}

	@Test
	public void testBinarySearch(){
		int expected = -1;
		assertEquals(expected, bs.binarySearch(arr, 1));
		assertEquals(expected, bs.binarySearchRecursive(arr, 1));
		assertEquals(expected, bs.binarySearch(null, 1));
		assertEquals(expected, bs.binarySearchRecursive(null, 1));
		
		assertEquals(expected, bsString.binarySearch(strArr, "1"));
		assertEquals(expected, bsString.binarySearchRecursive(strArr, "1"));
		assertEquals(expected, bsString.binarySearch(null, "1"));
		assertEquals(expected, bsString.binarySearchRecursive(null, "1"));
		
		for(expected = 0; expected < 10; expected++){
			String expectedString = Integer.toString(expected);
			arr.add(expected);
			strArr.add(expectedString);
			
			assertEquals(expected, bs.binarySearch(arr, expected));
			assertEquals(expected, bs.binarySearchRecursive(arr, expected));
			
			assertEquals(expected, bsString.binarySearch(strArr, expectedString));
			assertEquals(expected, bsString.binarySearchRecursive(strArr, expectedString));
		}
		
		expected = -1;
		
		for(int i = 0; i < 10; i++){
			String expectedString = Integer.toString(i);
			arr.remove(new Integer(i));
			strArr.remove(expectedString);
			assertEquals(expected, bs.binarySearch(arr, i));
			assertEquals(expected, bs.binarySearchRecursive(arr, i));
			assertEquals(expected, bsString.binarySearch(strArr, expectedString));
			assertEquals(expected, bsString.binarySearchRecursive(strArr, expectedString));
		}

	}
	
	@Test
	public void testBinarySearchCustomClass(){
		
	}
	
	/**
	 * Class that is identified by two fields id1 and id2.
	 * The attribute notId is a non-unique field.
	 * 
	 * @author Brian
	 *
	 */
	class CustomClass implements Comparable<CustomClass>{
		private int id1;
		private String id2;
		private int notId;
		
		CustomClass(int id1, String id2, int notId){
			this.id1 = id1;
			this.id2 = id2;
			this.notId = notId;
		}

		/**
		 * We first sort by id1 then id2.
		 */
		public int compareTo(CustomClass that) {
			
			
			if(Integer.compare(this.id1, that.id1) > 0){
				return 1;
			}else if(Integer.compare(this.id1, that.id1) < 0){
				return -1;
			}else if(this.id2.compareTo(that.id2) > 0){
				return 1;
			}else if(this.id2.compareTo(that.id2) < 0){
				return -1;
			}
			return 0;
		}
		
		public String toString(){
			return "([" + this.id1 + ", " + this.id2 + "], " + this.notId + ")";
		}
	}
}
