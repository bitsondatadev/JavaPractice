package DataStructures;

import java.util.List;
import java.util.ArrayList;
import java.util.function.Function;

public class TreeNode<T>{

	private List<TreeNode<T>> children = null;
	private PrintInterface<T> visit;

	private T data;

	public TreeNode(T data){
		this.children = new ArrayList<TreeNode<T>>();
		this.visit = new PrintInterface<T>() {
	        public void print(T data) {
	            System.out.println(data);
	        }
	    };
		this.setData(data);	
	}

	public List<TreeNode<T>> getChildren() {
		return children;
	}

	public void appendChild(TreeNode<T> child) {
		this.children.add(child);
	}

	public T getData() {
		return data;
	}

	public void setData(T data) {
		this.data = data;
	}
	
	public static void inOrderTraversal(TreeNode<Object> node, TreeTask<Object> visit){
		if(node != null){
			for(TreeNode<Object> child: node.getChildren()){
				visit.run(child.getData());
			}
		}
	}

}

interface TreeTask<T>{
	public void run(T data);
}

class PrintNode<T> implements TreeTask<T>{
	public void run(T data) {
		System.out.println(data);
	}
}