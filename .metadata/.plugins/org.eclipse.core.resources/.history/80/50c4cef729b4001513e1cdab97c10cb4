package Chapter3;

import java.lang.reflect.Array;

public class Question1<T>{

	private Class<T> clazz;
	private T[] arr;
	private int s1, s2, s3, c1, c2, c3;

	public Question1(Class<T> clazz, int n){
		this.clazz = clazz;
		if(n < 3){
			n=3;
		}
		this.arr = createArray(n);
		this.s1 = 0;
		this.s2 = (int) Math.ceil(n * .3333);
		this.s3 = this.s2 * 2;
		this.s3 = this.s3 >= n ? n - 1 : this.s3;
		this.c1 = this.c2 = this.c3 = 0;
		
	}
	
	@SuppressWarnings("unchecked")
	private T[] createArray(int n){
		return (T[])Array.newInstance(this.clazz, n);
	}
	
	public boolean empty(int stack){
		switch(stack){
		case 1: return c1==0;
		case 2: return c2==0;
		case 3: return c3==0;
		}
		return c1==0 && c2==0 && c3==0;
	}
	
	public T peek(int stack){
		switch(stack){
		case 1: return this.empty(stack) ? null : this.arr[this.s1];
		case 2: return this.empty(stack) ? null : this.arr[this.s2];
		case 3: return this.empty(stack) ? null : this.arr[this.s3];
		}
		return c1==0 && c2==0 && c3==0;
	}
	
	public T pop(int stack){
		if(this.empty()){
			return null;
		}
		LinkedListNode<T> val = this.linkedList.removeTail();
		return val.getData();
	}
	
	public T push(T item, int stack){
		if(item == null){
			return null;
		}
		
		switch(stack){
		case 1: 
			
			break;
		case 2: 
			
			break;
		case 3: 
			
			break;
		}
		
		return item;
	}
	
	private void resizeArray(){
		
	}
	
	public int size(int stack){
		switch(stack){
		case 1: return this.c1;
		case 2: return this.c2;
		case 3: return this.c3;
		}
		return this.c1 + this.c2 + this.c3;
	}
}
