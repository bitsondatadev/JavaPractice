package Algorithms;

/**
 * BinarySearch algorithms that require that type T implements comparable.
 * 
 * I want to make a few remarks on the "? super T" syntax. It's called a wild card and is used in conjunction with "super".
 * Super in Generics is the opposite of extends. Instead of saying the comparable's generic type has to be a subclass of T, 
 * it is saying it has to be a superclass of T.
 * A List<? super Integer>, for example, includes List<Integer>, List<Number>, and List<Object>.
 * @author Brian
 *
 * @param <T>
 */
public class BinarySearch<T extends Comparable<? super T>> {
	public static int binarySearch(Comparable<Object>[] array, Comparable<Object> key){
		int low = 0;
		int high = array.length;
		int mid;
		
		while(high >= low){
			mid = (high + low)/2;
			
			if(array[mid].compareTo(key) < 0){
				low = mid + 1;
			}else if(array[mid].compareTo(key) > 0){
				high = mid - 1;
			}else{
				return array[mid];
			}
		}
		
		return -1;
	}
}
