package Chapter3;

import DataStructures.*;

import org.junit.*;

import static org.junit.Assert.*;

public class Question1Test{
	Question1 q1;

	@Before
	public void setUp(){
		q1 = new Question1(Integer.class, 20);
	}

	@After
	public void tearDown(){

	}

	@Test
	public void testInitialize(){
		assertNotNull(q1);
		
		assertTrue(q1.empty(1));
		assertTrue(q1.empty(2));
		assertTrue(q1.empty(3));
		
		assertNull(q1.peek(1));
		assertNull(q1.peek(2));
		assertNull(q1.peek(3));
		
		assertNull(q1.pop(1));
		assertNull(q1.pop(2));
		assertNull(q1.pop(3));
	}

	@Test
	public void testPushAndPopFromNull(){
		assertTrue(q1.empty());
		
		Integer expected = new Integer(5);
		stack.push(expected);
		
		assertFalse(stack.empty());
		assertEquals(1, stack.size());
		assertEquals(expected,stack.peek());
		assertEquals(expected,stack.pop());
		
		assertTrue(stack.empty());

	}
	
	@Test
	public void testPushAndPopAfterOneElement(){
		Integer five = new Integer(5);
		Integer eight = new Integer(8);
		
		stack.push(five);
		stack.push(eight);
		
		assertFalse(stack.empty());
		assertEquals(2, stack.size());
		assertEquals(eight,stack.peek());
		assertEquals(eight,stack.pop());
		
		assertEquals(1, stack.size());
		assertEquals(five,stack.peek());
		assertEquals(five,stack.pop());

		assertEquals(0, stack.size());
		assertTrue(stack.empty());

	}


}
