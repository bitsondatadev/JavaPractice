package Chapter3;

import DataStructures.*;

public class Question4<T>{

	private Stack<T> pushStack;
	private Stack<T> popStack;
	private int size;
	private int currentStackIndex;

	public Question4(int threshold){
		this.pushStack = new Stack<T>();
		this.popStack  = new Stack<T>();
		this.size = 0;
	}
	
	public boolean empty(){
		return this.size == 0;
	}
	
	
	public T peek(){
		if(this.empty()){
			return null;
		}
		return this.stacks.get(this.currentStackIndex).peek();
	}
	
	public T remove(){
		if(this.empty()){
			return null;
		}
		T val = this.stacks.get(this.currentStackIndex).pop();
		while(val == null && this.currentStackIndex >= 0){
			this.stacks.remove(this.currentStackIndex);
			this.currentStackIndex--;
			val = this.stacks.get(this.currentStackIndex).pop();
		}
		if(val != null){
			this.size--;
		}
		
		return val;
	}
	
	public T add(T item){
		if(item == null){
			return null;
		}
		
		
		
		return item;
	}
	
	private void swapStacks(){
		if(this.pushStack.size() > 0){
			T val = this.pushStack.pop();
			while(val != null){
				this.popStack.push(val);
				val = this.pushStack.pop();
			}
		}
	}
	
	public int size(){
		return this.size;
	}
}
